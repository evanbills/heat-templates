heat_template_version: 2013-05-23
description: >
  A simple Heat template that spins up multiple instances and a private network (HOT template in YAML).
  The spawned instances will take a login from user 'ec2-user' and requires a key pair to be setup previously.

#These parameters will need to be customized for your OpenStack environment.
parameters:
  public_net_id:
    type: string
    description: ID of the external network; specific to the SA Lab network.
    default: d309aab8-c571-4cc9-b11d-47da4766301b
  image: 
    type: string
    default: 71434e70-ec09-4f24-b423-670dbfab17ee
    description: RHEL7.1 WP Image
  key_name: 
    type: string
    default: evan-cloud-key
    description: SSH key to connect to the servers
  flavor: 
    type: string
    default: m1.small
    description: flavor used by the servers

resources:

#setup all the networks
  private-net-01:
    type: OS::Neutron::Net
    properties:
      admin_state_up: true
      name: private-net-01

#subnet definitions
  heat_subnet_01:
    type: OS::Neutron::Subnet
    properties:
      name: heat-subnet-01
      cidr: 192.168.1.0/24
      dns_nameservers: [8.8.8.8, 8.8.4.4]
      enable_dhcp: true
      gateway_ip: 192.168.1.1
      network_id: { get_resource: private-net-01 }


#setup the router
  heat_router_01:
    type: OS::Neutron::Router
    properties:
      admin_state_up: true
      name: heat-router-01
  heat_router_01_gw:
    type: OS::Neutron::RouterGateway
    properties:
      network_id: { get_param: public_net_id }
      router_id: { get_resource: heat_router_01 }
  heat_router_int1:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: heat_router_01 }
      subnet_id: { get_resource: heat_subnet_01 }

#setup the load balancer
  lb_vip_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private-net-01 }
      fixed_ips:
        - subnet_id: { get_resource: heat_subnet_01 }

  lb_vip_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: lb_vip_port }

  lb_pool_vip:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: lb_vip_floating_ip }
      port_id: { 'Fn::Select': ['port_id', {get_attr: [pool, vip]}]}

  monitor:
    type: OS::Neutron::HealthMonitor
    properties:
      type: TCP
      delay: 3
      max_retries: 5
      timeout: 5

  pool:
    type: OS::Neutron::Pool
    properties:
      protocol: HTTP
#      monitors: [{get_resource: monitor}]
      monitors: 
        - {get_resource: monitor}
      subnet_id: {get_resource: heat_subnet_01}
      lb_method: ROUND_ROBIN
      vip:
        protocol_port: 80

  lb:
    type: OS::Neutron::LoadBalancer
    properties:
      protocol_port: 80
      pool_id: {get_resource: pool}
      members: { get_resource: [instance0, instance1] }
      ## session_persistence:
      ##   type: SOURCE_IP
      # nodes:
      # - addresses: { get_attr: [web_nodes, accessIPv4]}


#setup the ports for the instances

  instance1_port0:
    type: OS::Neutron::Port
    properties:
      admin_state_up: true
      network_id: { get_resource: private-net-01 }
      security_groups: 
       - default

  instance2_port0:
    type: OS::Neutron::Port
    properties:
      admin_state_up: true
      network_id: { get_resource: private-net-01 }
      security_groups: 
       - default

  # instance3_port0:
  #   type: OS::Neutron::Port
  #   properties:
  #     admin_state_up: true
  #     network_id: { get_resource: private-net-01 }
  #     security_groups: 
  #      - default


#setup the instances
  instance0:
    type: OS::Nova::Server
    properties:
      name: web-server-01
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      networks:
        - port: { get_resource: instance1_port0 }



  instance1:
    type: OS::Nova::Server
    properties:
      name: web-server-02
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      networks:
        - port: { get_resource: instance2_port0 }

  # instance2:
  #   type: OS::Nova::Server
  #   properties:
  #     name: web-server-03
  #     image: {get_param: image}
  #     flavor: {get_param: flavor}
  #     key_name: {get_param: key_name}
  #     networks:
  #       - port: { get_resource: instance3_port0 }


#assign public IPs to the instances
  # instance0_floating_ip:
  #   type: OS::Neutron::FloatingIP
  #   properties:
  #     floating_network_id: { get_param: public_net_id }
  #     port_id: { get_resource: instance1_port0 }

  # instance1_floating_ip:
  #   type: OS::Neutron::FloatingIP
  #   properties:
  #     floating_network_id: { get_param: public_net_id }
  #     port_id: { get_resource: instance2_port0 }

  # instance2_floating_ip:
  #   type: OS::Neutron::FloatingIP
  #   properties:
  #     floating_network_id: { get_param: public_net_id }
  #     port_id: { get_resource: instance3_port0 }

# this stuff would come into play with Icehouse... much simpler than 
  # web_nodes:
  #   type: OS::Heat::ResourceGroup
  #   properties:
  #     count: 2
  #     resource_def:
  #       type: OS::Nova::Server
  #       properties:
  #         flavor: {get_param: flavor}
  #         image: {get_param: image}
  #         name: LB-Compute Web Nodes 
  #         key_name: {get_param: key_name}

# Resource Create Failed: Stackvalidationfailed: Property Error : Lb: Members The Referenced Attribute (Instance0 Instance1) Is Incorrect.
#ValueError: lb: members The Referenced Attribute (instance0 instance1) is incorrect.
